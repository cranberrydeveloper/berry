const axios = require('axios');
const { PDFDocument } = require('pdf-lib');
const sentenceSplitter = require('sentence-splitter');
const pinecone = require('pinecone-client');

// Function to download PDF document from URL
async function downloadPDF(url) {
    const response = await axios.get(url, { responseType: 'arraybuffer' });
    return response.data;
}

// Function to extract text from PDF document
async function extractTextFromPDF(pdfBuffer) {
    const pdfDoc = await PDFDocument.load(pdfBuffer);
    const pages = pdfDoc.getPages();
    let text = '';
    for (const page of pages) {
        text += await page.getText();
    }
    return text;
}

// Function to split text into groups of sentences
function splitIntoSentenceGroups(text) {
    const sentences = sentenceSplitter.split(text);
    const sentenceGroups = [];
    for (let i = 0; i < sentences.length; i += 5) {
        const group = sentences.slice(i, i + 5).map(sentence => sentence.raw);
        sentenceGroups.push(group);
    }
    return sentenceGroups;
}

// Function to generate embeddings for text using Pinecone
async function generateEmbeddings(text) {
    const embeddings = await pinecone.embed('model-name', text);
    return embeddings;
}

// Function to insert embeddings into Pinecone
async function insertEmbeddingsIntoPinecone(embeddings) {
    for (const embedding of embeddings) {
        await pinecone.insert('index-name', embedding);
    }
}

// Main function
async function main() {
    const pdfUrl = 'your-pdf-url';
    const pdfBuffer = await downloadPDF(pdfUrl);
    const text = await extractTextFromPDF(pdfBuffer);
    const sentenceGroups = splitIntoSentenceGroups(text);
    for (const group of sentenceGroups) {
        const embeddings = await generateEmbeddings(group);
        await insertEmbeddingsIntoPinecone(embeddings);
    }
}

main().catch(console.error);
